#!/bin/bash
sp="   "
date=$(date '+%Y-%m-%d_%H:%M:%S')
color='\033[1;93m'
user_name=$(git config --get user.name)
user_email=$(git config --get user.email)
line="â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€"
line_up="â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®"
line_dw="â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯"
no_title="Untitled task"
latestTag=$(git describe --tags)

nc='\033[0m'
# clear

wellcome() {
    clear
    echo -e "$spâ•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®"
    echo -e "$spâ”‚                                                               â”‚"
    echo -e "$spâ”‚            ðŸ¥š ${color}EGG${nc} Automation Workflow Task                    â”‚"
    echo -e "$spâ”‚                                                               â”‚"
    echo -e "$spâ”‚ v2.0.0                                    by GermÃ¡n Aliprandi â”‚"
    echo -e "$spâ•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯"
    echo -e ""
}

abort() {
    clear
    echo ""
    echo "$spYou have aborted this mission. See ya in the cyberspace !"
    echo ""
    exit 1
}

inp_type() {
    while true; do
        echo -e "$sp 1. ${color}feat${nc}:     A new feature"
        echo -e "$sp 2. ${color}fix${nc}:      A bug fix"
        echo -e "$sp 3. ${color}docs${nc}:     Documentation only changes"
        echo -e "$sp 4. ${color}style${nc}:    Changes that do not affect the meaning of the code (formatting, semi-colons, etc)"
        echo -e "$sp 5. ${color}refactor${nc}: A code change that neither fixes a bug nor adds a feature"
        echo -e "$sp 6. ${color}perf${nc}:     A code change that improves performance"
        echo -e "$sp 7. ${color}test${nc}:     Adding missing or correcting existing tests"
        echo -e "$sp 8. ${color}chore${nc}:    Changes to the build process or auxiliary tools, libraries or documentation"
        echo -e "$sp "
        echo -e "$sp A. ${color}Advanced${nc}:        Show advanced options"
        echo -e ""
        echo -e "$sp 0. ${color}Exit${nc}:     Exit now !"
        echo ""
        read -p "$sp Select a task type: " type
        case $type in
        [1]*)
            type="feat"
            break
            ;;
        [2]*)
            type="fix"
            break
            ;;
        [3]*)
            type="docs"
            break
            ;;
        [4]*)
            type="style"
            break
            ;;
        [5]*)
            type="refactor"
            break
            ;;
        [6]*)
            type="perf"
            break
            ;;
        [7]*)
            type="test"
            break
            ;;
        [8]*)
            type="chore"
            break
            ;;
        "a" | "A")
            advanced_options
            break
            ;;
        [0]*)
            abort
            ;;
        *)
            clear
            wellcome
            ;;
        esac
    done
    wellcome
    echo -e "$sp${color}Creating a new task:${nc}"
    echo -e ""
    echo "$sp- Task type: $type"
}

inp_task() {
    echo ""
    read -p "$sp- ClickUp task ID [none]: " ticket
    ticket=${ticket:-none}
    ticket=${ticket//#/}
}

inp_title() {
    echo ""
    read -p "$sp- Task title: " title
    title=${title:-$no_title}
    title=${title^}
}

inp_branch() {
    branch_sug=${title// /-}
    branch_sug=${branch_sug,,}
    echo ""
    read -p "$sp- Branch name [$branch_sug]: " branch_res
    branch_res=${branch_res:-$branch_sug}
    branch_res=${branch_res// /-}
    branch_res=${branch_res,,}
}

create_vars() {
    mr_desc="[$title](https://app.clickup.com/t/$ticket)"
    mr_title="Draft: $type: $title"
    if [[ $ticket == 'none' ]]; then
        mr_desc=$title
    fi
    branch="$type/#$ticket/$branch_res"
    ch_entry="- [**${type^}**: $title](https://app.clickup.com/t/$ticket)"
}

update_changelog() {
    sed -i "/## UnReleased/a $ch_entry" CHANGELOG.md
}

confirm() {
    clear
    wellcome
    echo -e "$sp${color}Do you ready to perform this tasks ?${nc}"
    echo ""
    echo "$sp 1) - Switch to develop branch"
    echo "$sp 2) - Pull latest develop branch changes"
    echo "$sp 3) - Create a new branch '$branch'"
    echo "$sp 4) - Add empty commit *required"
    echo "$sp 5) - Create MR from the new branch with title '$mr_title'"
    echo "$sp 6) - Add description to new MR '$mr_desc'"
    echo "$sp 7) - Link ClickUp tick with MR and branch"
    echo "$sp 8) - Update CHANGELOG.md with task type and desciption"
    echo ""

    read -p "$sp Do you wish to continue? [y/N]: " confirm

    case "$confirm" in
    [yY][eE][sS] | [yY])
        performing_task
        ;;
    *)
        abort
        ;;
    esac

}

performing_task() {
    echo ""
    echo "Perfoming task, please wait..."
    git checkout develop
    git pull origin develop
    git checkout -b $branch
    git push --set-upstream origin $branch
    git commit --allow-empty -m "$date | $mr_title | #${ticket}[DOING]"
    git push \
        -o merge_request.create \
        -o merge_request.target="develop" \
        -o merge_request.title="$mr_title" \
        -o merge_request.description="$mr_desc" \
        -o merge_request.label="$type" \
        -o merge_request.remove_source_branch
    update_changelog
}

main() {
    wellcome
    inp_type
    inp_task
    inp_title
    inp_branch
    create_vars
    confirm
    performing_task

}

advanced_menu() {
    wellcome
    while :; do
        echo -e "                      ${color}*** ADVANCED OPTIONS ***${nc}"
        echo -e ""
        echo -e "$sp 1) ${color}Release${nc}: Create a new release"
        echo -e ""
        echo -e ""
        echo -e "$sp 0) ${color}Exit${nc}:     Exit now !"
        echo -e "$sp x) Back to main menu"
        echo -e ""
        echo -e ""

        read -p "$sp Choice a action: " adv_option
        case $adv_option in
        [1]*)
            adv_create_release
            break
            ;;
        "x" | "X")
            main
            break
            ;;
        [0]*)
            abort
            ;;
        *)
            clear
            advanced_menu
            ;;
        esac

    done
}

advanced_options() {
    advanced_menu
}

adv_create_release() {
    wellcome
    echo -e "$sp Advance options > ${color}Create a new release${nc}"
    echo -e ""
    adv_cr_inp_release_values

    adv_cr_summary
    exit 1
}

adv_cr_inp_release_values() {
    release_sug=$(date +v%Y%m%d_%H%M)
    read -p "$sp Release name [$release_sug]: " release_res
    release_res=${release_res:-$release_sug}
    release_res=${release_res// /-}
    release_res=${release_res,,}
    echo ""
    read -p "$sp Branch source [develop]: " branch_source
    branch_source=${branch_source:-develop}
    echo ""
    read -p "$sp Branch target [staging]: " branch_target
    branch_target=${branch_target:-staging}
    mr_title="Release $release_res into $branch_target"
}

adv_cr_update_changelog() {
    file="CHANGELOG.md"
    tag="## UnReleased"
    if test -f "./$FILE"; then
        new_lines="$tag\n\n## $release_res"
        if grep -Fxq "$tag" $file; then
            sed -i "s/$tag/$new_lines/i" $file

        else
            sed -i "1s/^/$tag\n\n/i" $file
        fi

    else
        echo $tag >"./$file"
    fi

}

adv_cre_performing_task() {
    echo ""
    echo "$sp Perfoming task, please wait..."
    git switch develop
    git pull origin develop
    git switch -c $release_res
    git push --set-upstream origin $release_res
    git commit --allow-empty -m "$title"
    git push \
        -o merge_request.create \
        -o merge_request.target="$branch_target" \
        -o merge_request.title="$mr_title" \
        -o merge_request.description="Power by awt script." \
        -o merge_request.remove_source_branch
    adv_cr_update_changelog
    git add ./CHANGELOG.md
    git commit -m "Update CHANGELOG.md"
    git push
}

adv_cr_summary() {
    clear
    wellcome
    echo -e "$sp ${color}Do you ready to perform this tasks ?${nc}"
    echo -e ""
    echo -e "$sp 1) - Switch to '$branch_source' branch"
    echo -e "$sp 2) - Pull latest '$branch_source' changes"
    echo -e "$sp 3) - Create a release branch '$release_res' from '$branch_source'"
    echo -e "$sp 4) - Create a MR from '${color}$release_res into $branch_target${nc}' with title '$mr_title'"
    echo -e "$sp 5) - Update and commit CHANGELOG.md"
    echo -e ""

    read -p "$sp Do you wish to continue? [y/N]: " confirm
    case "$confirm" in
    [yY][eE][sS] | [yY])
        adv_cre_performing_task
        ;;
    *)
        abort
        ;;
    esac

}

main
